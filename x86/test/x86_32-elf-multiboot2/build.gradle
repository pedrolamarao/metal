plugins
{
    id 'base'
}

subprojects
{
    // settings

    apply plugin: AsmLanguage
    apply plugin: 'br.dev.pedrolamarao.gdb'
    apply plugin: 'dev.nokee.cpp-application'

    // project

    application
    {
        // #XXX: Nokee can't cross compile to system "none"
        final os = org.gradle.internal.os.OperatingSystem.current().getName()
        targetMachines = [ machines.os(os).architecture('-multiboot-x86_32') ]

        dependencies
        {
            implementation project(':multiboot2')
            implementation project(':x86')
        }

        binaries.configureEach {

            compileTasks.configureEach {
                compilerArgs.addAll '-std=c++20', '-Wall', '-g'
            }

            final linker = it.linkTask.get()
            linker.linkerArgs.addAll '-std=c++20', '-Wl,-g', '-Wl,-Ttext=0x1000'

        }
    }

    final createMultibootRescue = tasks.register('createMultibootRescue', CreateMultibootRescue) {
        group = 'psys'
        dependsOn assemble
        inputFile = providers.provider {
            application.binaries
                .filter { it.isBuildable() }
                .map { it.get(0).linkTask.get().linkedFile.get() }
                .get()
        }
    }

    tasks.register('runMultibootRescueWindows', RunMultibootRescue) {
        group = 'psys'
        imageFile = createMultibootRescue.get().outputFile
    }

    def testRescue = tasks.register('testMultibootRescue', TestMultibootRescue) {
        group = 'psys'
        executableFile = providers.provider {
            application.binaries
                .filter { it.isBuildable() }
                .map { it.get(0).linkTask.get().linkedFile.get() }
                .get()
        }
        imageFile = createMultibootRescue.get().outputFile
    }

    check.dependsOn testRescue

    parent.tasks.named('check') { dependsOn check }
}
