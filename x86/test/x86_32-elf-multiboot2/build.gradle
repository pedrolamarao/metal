plugins
{
    id 'base'
}

subprojects
{
    // settings

    apply plugin: AsmLanguage
    apply plugin: 'br.dev.pedrolamarao.gdb'
    apply plugin: 'dev.nokee.cpp-application'

    // project

    application
    {
        // #XXX: Nokee can't cross compile to system "none"
        final os = org.gradle.internal.os.OperatingSystem.current().getName()
        targetMachines = [ machines.os(os).architecture('-multiboot-x86_32') ]

        dependencies
        {
            implementation project(':multiboot2')
            implementation project(':x86')
        }

        final baseArgs = [ '-std=c++20', '-flto', '-fasm-blocks', '-gdwarf' ]

        binaries.configureEach {
            compileTasks.configureEach {
                compilerArgs.addAll baseArgs
            }
            linkTask.get().with {
                linkerArgs.addAll baseArgs
                linkerArgs.addAll '-Wl,-Ttext=0x1000', '-Wl,--entry=__multiboot2_start'
            }
        }
    }

    final createImage = tasks.register('createImage', CreateMultibootImage) {
        group = 'psys'
        dependsOn assemble
        inputFile = providers.provider {
            application.binaries
                .filter { it.isBuildable() }
                .map { it.get(0).linkTask.get().linkedFile.get() }
                .get()
        }
    }

    tasks.register('runImage', RunMultibootImage) {
        group = 'psys'
        imageFile = createImage.get().outputFile
    }

    def testImage = tasks.register('testImage', TestMultibootImage) {
        group = 'psys'
        executableFile = providers.provider {
            application.binaries
                .filter { it.isBuildable() }
                .map { it.get(0).linkTask.get().linkedFile.get() }
                .get()
        }
        imageFile = createImage.get().outputFile
    }

    check.dependsOn testImage

    parent.tasks.named('check') { dependsOn check }
}
