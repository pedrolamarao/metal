final llvmPath = providers.provider { rootProject.ext.tools['br.dev.pedrolamarao.psys.llvm.path'] }

final x86_32_elf_multiboot2_ld = rootProject.file('multiboot2/x86_32-elf.ld')
final x86_64_elf_multiboot2_ld = rootProject.file('multiboot2/x86_64-elf.ld')

final llvm = {
    assembler.executable = 'clang'
    cCompiler.executable = 'clang'
    cppCompiler.executable = 'clang++'
    linker.executable = 'clang++'
    staticLibArchiver.executable = 'llvm-ar'
}

final llvm_linux = {
    assembler.executable = 'clang'
    cCompiler.executable = 'clang'
    cppCompiler.executable = 'clang++'
    linker.executable = 'clang++'
    linker.withArguments { addAll '-lpthread' }
    staticLibArchiver.executable = 'llvm-ar'
}

final x86_32_elf = {
    assembler.executable = 'clang'
    assembler.withArguments {
        addAll '-target', 'i386-elf', '-gdwarf'
    }
    cCompiler.executable = 'clang'
    cCompiler.withArguments {
        addAll '-target', 'i386-elf', '-ffreestanding', '-gdwarf', '-nostdinc'
    }
    cppCompiler.executable = 'clang++'
    cppCompiler.withArguments {
        addAll '-target', 'i386-elf', '-ffreestanding', '-gdwarf', '-nostdinc'
    }
    linker.executable = 'clang++'
    // #XXX: clang can't link target i386-elf with lld
    linker.withArguments {
        addAll '-target', 'i386-linux-elf', '-fuse-ld=lld', '-gdwarf', '-nostdlib', '-static'
    }
    staticLibArchiver.executable = 'llvm-ar'
}

final x86_32_multiboot2_elf = {
    assembler.executable = 'clang'
    assembler.withArguments {
        addAll '-target', 'i386-elf', '-gdwarf'
    }
    cCompiler.executable = 'clang'
    cCompiler.withArguments {
        addAll '-target', 'i386-elf', '-ffreestanding', '-gdwarf', '-nostdinc'
    }
    cppCompiler.executable = 'clang++'
    cppCompiler.withArguments {
        addAll '-target', 'i386-elf', '-ffreestanding', '-gdwarf', '-nostdinc'
    }
    linker.executable = 'clang++'
    // #XXX: clang can't link target i386-elf with lld
    linker.withArguments {
        addAll '-target', 'i386-linux-elf', '-fuse-ld=lld', '-gdwarf', '-nostdlib', '-static',
            "-Wl,--script=${x86_32_elf_multiboot2_ld}"
    }
    staticLibArchiver.executable = 'llvm-ar'
}

final x86_64_elf = {
    assembler.executable = 'clang'
    assembler.withArguments {
        addAll '-target', 'x86_64-elf', '-gdwarf'
    }
    cCompiler.executable = 'clang'
    cCompiler.withArguments {
        addAll '-target', 'x86_64-elf', '-ffreestanding', '-gdwarf', '-nostdinc'
    }
    cppCompiler.executable = 'clang++'
    cppCompiler.withArguments {
        addAll '-target', 'x86_64-elf', '-ffreestanding', '-gdwarf', '-nostdinc'
    }
    linker.executable = 'clang++'
    // #XXX: clang can't link target x86_64-elf with lld
    linker.withArguments {
        addAll '-target', 'x86_64-linux-elf', '-fuse-ld=lld', '-gdwarf', '-nostdlib', '-static'
    }
    staticLibArchiver.executable = 'llvm-ar'
}

final x86_64_multiboot2_elf = {
    assembler.executable = 'clang'
    assembler.withArguments {
        addAll '-target', 'x86_64-elf', '-gdwarf'
    }
    cCompiler.executable = 'clang'
    cCompiler.withArguments {
        addAll '-target', 'x86_64-elf', '-ffreestanding', '-gdwarf', '-nostdinc'
    }
    cppCompiler.executable = 'clang++'
    cppCompiler.withArguments {
        addAll '-target', 'x86_64-elf', '-ffreestanding', '-gdwarf', '-nostdinc'
    }
    linker.executable = 'clang++'
    // #XXX: clang can't link target x86_64-elf with lld
    linker.withArguments {
        addAll '-target', 'x86_64-linux-elf', '-fuse-ld=lld', '-gdwarf', '-nostdlib', '-static',
            "-Wl,--script=${x86_64_elf_multiboot2_ld}"
    }
    staticLibArchiver.executable = 'llvm-ar'
}

final uefi_x86_64 = {
    assembler.executable = 'clang'
    assembler.withArguments { addAll '-target', 'x86_64-unknown-windows' }
    cCompiler.executable = 'clang'
    cCompiler.withArguments {
        addAll '-target', 'x86_64-unknown-windows',
                '-ffreestanding', '-fshort-wchar', '-nostdinc'
    }
    cppCompiler.executable = 'clang++'
    cppCompiler.withArguments {
        addAll '-target', 'x86_64-unknown-windows',
            '-ffreestanding', '-fshort-wchar', '-nostdinc'
    }
    linker.executable = 'clang++'
    // #XXX: clang can't link target i386-elf with lld
    linker.withArguments {
        addAll '-target', 'x86_64-unknown-windows', '-fuse-ld=lld',
            '-nostdlib', '-Wl,-entry:efi_main', '-Wl,-subsystem:efi_application'
    }
    staticLibArchiver.executable = 'llvm-ar'
}

project.model
{
    toolChains
    {
        llvm_host(Clang)
        {
            if (llvmPath.isPresent()) { it.path(llvmPath) }
            final os = System.getProperty("os.name")
            if (os.containsIgnoreCase("linux")) {
                rootProject.logger.lifecycle("oops")
                it.target("linuxx86-64", llvm_linux)
            }
            else {
                it.target("windowsx86-64", llvm)
            }

        }
        llvm_x86_32_elf(Clang)
        {
            if (llvmPath.isPresent()) { it.path(llvmPath) }
            it.target('host-x86_32-elf', x86_32_elf)
        }
        llvm_x86_32_multiboot2_elf(Clang)
        {
            if (llvmPath.isPresent()) { it.path(llvmPath) }
            it.target('host-x86_32-multiboot2-elf', x86_32_multiboot2_elf)
        }
        llvm_x86_64_elf(Clang)
        {
            if (llvmPath.isPresent()) { it.path(llvmPath) }
            it.target('host-x86_64-elf', x86_64_elf)
        }
        llvm_x86_64_multiboot2_elf(Clang)
        {
            if (llvmPath.isPresent()) { it.path(llvmPath) }
            it.target('host-x86_64-multiboot2-elf', x86_64_multiboot2_elf)
        }
        llvm_x86_64_uefi_pe(Clang)
        {
            if (llvmPath.isPresent()) { it.path(llvmPath) }
            it.target('host-x86_64-uefi-pe', uefi_x86_64)
        }
    }
}
