// settings

plugins
{
    id 'aasgard.asm' version '0.1.0-SNAPSHOT'
    id 'aasgard.grub' version '0.1.0-SNAPSHOT'
    id 'aasgard.qemu' version '0.1.0-SNAPSHOT'
    id 'cpp-application'
}

def QemuExec = aasgard.gradle.qemu.QemuExec

// project

group 'aasgard'
version '0.1.0-SNAPSHOT'

tasks.register('grub') {
    group 'build'
    description 'Generates GRUB images'
}

application
{
    // XXX: Gradle 6.1 refuses to cross compile
    // XXX: convince Gradle 6.1 to configure compiler to 32 bits for now
    targetMachines = [ machines.linux.x86 ]

    binaries.whenElementFinalized { binary ->
    
    	def compiler = compileTask.get()
    	compiler.compilerArgs.addAll '-std=c++17', '-ffreestanding'
    	
    	def linker = linkTask.get()
    	linker.linkerArgs.addAll '-nostdlib', '-Ttext', '0x1000'
    	
    	def grubPc = tasks.register("grubPc${binary.name.capitalize()}", aasgard.gradle.grub.GrubStandaloneCompile) {
            binaryName binary.name.capitalize()
            format 'i386-pc'
            install 'normal', 'at_keyboard'
            sources 'src/main/grub', linker
    	}

        def grubQemu = tasks.register("grubQemu${binary.name.capitalize()}", aasgard.gradle.grub.GrubStandaloneCompile) {
            binaryName binary.name.capitalize()
            format 'i386-qemu'
            sources 'src/main/grub', linker
        }

        def grubRescue = tasks.register("grubRescue${binary.name.capitalize()}", aasgard.gradle.grub.GrubRescueCompile) {
            binaryName binary.name.capitalize()
            sources 'src/main/grub', linker
        }
        
        tasks.register("qemuBios${binary.name.capitalize()}", QemuExec) {
            system 'i386'
            bios grubQemu.get().target
            gdb 'tcp::1234'
            start false
        }
        
        tasks.register("qemuPc${binary.name.capitalize()}", QemuExec) {
            system 'i386'
            kernel grubPc.get().target
            gdb 'tcp::1234'
            start false
        }
        
        tasks.register("qemuRescue${binary.name.capitalize()}", QemuExec) {
            system 'i386'
            cdrom grubRescue.get().target
            gdb 'tcp::1234'
            start false
        }
    	
    	grub.dependsOn grubPc, grubQemu, grubRescue
    }
}

dependencies
{
	implementation project(':multiboot2')
	implementation project(':x86')
}

// tasks

assemble.dependsOn grub

task environment(type: Exec) {
    commandLine 'env'
}
